# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–≥—Ä—ã –¥–ª—è –∫–∞–∑–∏–Ω–æ-–±–æ—Ç–∞
# –ú–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ bot.py –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

import secrets
import asyncio

def blackjack():
    """–ë–ª—ç–∫–¥–∂–µ–∫ - –ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è"""
    player_cards = [secrets.randbelow(10) + 1, secrets.randbelow(10) + 1]
    dealer_cards = [secrets.randbelow(10) + 1, secrets.randbelow(10) + 1]

    player_sum = sum(player_cards)
    dealer_sum = sum(dealer_cards)

    # –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
    if player_sum > 21:
        return False, f"üÉè –í—ã: {player_sum} | –î–∏–ª–µ—Ä: {dealer_sum}\n–ü–µ—Ä–µ–±–æ—Ä!", 0.0
    elif dealer_sum > 21 or player_sum > dealer_sum:
        return True, f"üÉè –í—ã: {player_sum} | –î–∏–ª–µ—Ä: {dealer_sum}\n–ü–æ–±–µ–¥–∞!", 2.0
    elif player_sum == dealer_sum:
        return True, f"üÉè –í—ã: {player_sum} | –î–∏–ª–µ—Ä: {dealer_sum}\n–ù–∏—á—å—è!", 1.0
    else:
        return False, f"üÉè –í—ã: {player_sum} | –î–∏–ª–µ—Ä: {dealer_sum}\n–ü—Ä–æ–∏–≥—Ä—ã—à!", 0.0

def crash():
    """Crash –∏–≥—Ä–∞"""
    multiplier = 1.0
    crash_point = 1.0 + secrets.randbelow(500) / 100  # 1.0 - 6.0

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ –≤ —Å–ª—É—á–∞–π–Ω–æ–π —Ç–æ—á–∫–µ
    auto_cashout = 1.0 + secrets.randbelow(300) / 100  # 1.0 - 4.0

    if auto_cashout < crash_point:
        return True, f"üìà Crash –Ω–∞ {crash_point:.2f}x\n–í—ã–≤–µ–ª–∏ –Ω–∞ {auto_cashout:.2f}x!", auto_cashout
    else:
        return False, f"üìà Crash –Ω–∞ {crash_point:.2f}x\n–ù–µ —É—Å–ø–µ–ª–∏ –≤—ã–≤–µ—Å—Ç–∏!", 0.0

class JackpotManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∂–µ–∫–ø–æ—Ç–∞"""
    def __init__(self, db):
        self.db = db
        self.current_pot = 0
        self.entries = []

    def add_entry(self, user_id, bet):
        """–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É –≤ –¥–∂–µ–∫–ø–æ—Ç"""
        self.db.conn.cursor().execute(
            'INSERT INTO jackpot_entries (user_id, bet) VALUES (?, ?)',
            (user_id, bet)
        )
        self.db.conn.commit()
        self.current_pot += bet
        self.entries.append((user_id, bet))

        # –ï—Å–ª–∏ —Å–æ–±—Ä–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–∞–≤–æ–∫ - —Ä–∞–∑—ã–≥—Ä–∞—Ç—å
        if len(self.entries) >= 5:  # –º–∏–Ω–∏–º—É–º 5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            return self.draw_winner()
        return None

    def draw_winner(self):
        """–†–∞–∑—ã–≥—Ä–∞—Ç—å –¥–∂–µ–∫–ø–æ—Ç"""
        if not self.entries:
            return None

        # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å (–±–æ–ª—å—à–µ —Å—Ç–∞–≤–∫–∞ = –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤)
        total_weight = sum(entry[1] for entry in self.entries)
        random_point = secrets.randbelow(total_weight)

        current_weight = 0
        for user_id, bet in self.entries:
            current_weight += bet
            if random_point < current_weight:
                # –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
                prize = self.current_pot
                self.db.update_balance(user_id, prize)

                # –û—á–∏—Å—Ç–∫–∞ –¥–∂–µ–∫–ø–æ—Ç–∞
                self.db.conn.cursor().execute('DELETE FROM jackpot_entries')
                self.db.conn.commit()
                self.current_pot = 0
                self.entries = []

                return user_id, prize

        return None

    def get_pot_info(self):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –¥–∂–µ–∫–ø–æ—Ç–µ"""
        return {
            'pot': self.current_pot,
            'entries': len(self.entries),
            'participants': list(set(entry[0] for entry in self.entries))
        }

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
def get_detailed_stats(db):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    c = db.conn.cursor()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º
    game_stats = c.execute('''
        SELECT game_type, COUNT(*), SUM(bet), SUM(result), AVG(multiplier)
        FROM games
        GROUP BY game_type
    ''').fetchall()

    # –¢–æ–ø –∏–≥—Ä–æ–∫–∏ –ø–æ –≤—ã–∏–≥—Ä—ã—à–∞–º
    top_winners = c.execute('''
        SELECT u.username, SUM(g.result - g.bet) as profit
        FROM users u
        JOIN games g ON u.user_id = g.user_id
        GROUP BY u.user_id
        ORDER BY profit DESC
        LIMIT 5
    ''').fetchall()

    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º
    daily_activity = c.execute('''
        SELECT DATE(created_at) as date, COUNT(*) as games_count
        FROM games
        WHERE created_at >= datetime('now', '-7 days')
        GROUP BY DATE(created_at)
        ORDER BY date DESC
    ''').fetchall()

    return {
        'games': game_stats,
        'top_winners': top_winners,
        'daily': daily_activity
    }

# –°–∏—Å—Ç–µ–º–∞ –∞–Ω—Ç–∏-—á–∏—Ç
class AntiCheat:
    @staticmethod
    def check_user_activity(db, user_id, timeframe_minutes=5):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        c = db.conn.cursor()
        recent_games = c.execute('''
            SELECT COUNT(*) FROM games
            WHERE user_id = ? AND created_at >= datetime('now', '-{} minutes')
        '''.format(timeframe_minutes), (user_id,)).fetchone()[0]

        return recent_games > 50  # –ë–æ–ª–µ–µ 50 –∏–≥—Ä –∑–∞ 5 –º–∏–Ω—É—Ç - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ

    @staticmethod
    def check_win_rate(db, user_id, min_games=20):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–∏–Ω—Ä–µ–π—Ç–∞"""
        user = db.get_user(user_id)
        if not user or user[4] < min_games:  # total_games
            return False

        win_rate = user[5] / user[4]  # total_wins / total_games
        return win_rate > 0.8  # –í–∏–Ω—Ä–µ–π—Ç –±–æ–ª–µ–µ 80% –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª–µ–Ω

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã
SPECIAL_PROMOS = {
    'WELCOME2024': {'reward': 2000, 'max_uses': 100},
    'LUCKY777': {'reward': 777, 'max_uses': 50},
    'BIGWIN': {'reward': 5000, 'max_uses': 10},
    'NEWBIE': {'reward': 1500, 'max_uses': 200}
}

def create_special_promos(db):
    """–°–æ–∑–¥–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã"""
    for code, data in SPECIAL_PROMOS.items():
        db.create_promo(code, data['reward'], data['max_uses'])
    print("–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã —Å–æ–∑–¥–∞–Ω—ã!")

# –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ë–î)
ACHIEVEMENTS = {
    'first_win': {'name': '–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞', 'reward': 100},
    'big_winner': {'name': '–ö—Ä—É–ø–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à', 'reward': 500},  # –≤—ã–∏–≥—Ä–∞–ª >5000
    'lucky_streak': {'name': '–í–µ–∑—É–Ω—á–∏–∫', 'reward': 1000},     # 5 –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥
    'high_roller': {'name': '–•–∞–π—Ä–æ–ª–ª–µ—Ä', 'reward': 2000},     # —Å—Ç–∞–≤–∫–∞ >1000
    'slots_master': {'name': '–ú–∞—Å—Ç–µ—Ä —Å–ª–æ—Ç–æ–≤', 'reward': 300}, # 10 –ø–æ–±–µ–¥ –≤ —Å–ª–æ—Ç–∞—Ö
    'jackpot_hunter': {'name': '–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –¥–∂–µ–∫–ø–æ—Ç–æ–º', 'reward': 1500}
}
