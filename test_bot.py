#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π –∫–∞–∑–∏–Ω–æ-–±–æ—Ç–∞
–ó–∞–ø—É—Å–∫: python test_bot.py
"""

import sqlite3
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_database():
    """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    try:
        from bot import Database
        db = Database()

        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user_id = 999999999
        db.create_user(test_user_id, "test_user")
        user = db.get_user(test_user_id)

        if user and user[2] == 1000:  # –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return False

        # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        db.update_balance(test_user_id, 500)
        balance = db.get_balance(test_user_id)

        if balance == 1500:
            print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")
            return False

        # –¢–µ—Å—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞
        db.create_promo("TEST123", 777, 1)
        success, msg = db.use_promo(test_user_id, "TEST123")

        if success:
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")
            return False

        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        cursor = db.conn.cursor()
        cursor.execute('DELETE FROM users WHERE user_id = ?', (test_user_id,))
        cursor.execute('DELETE FROM promo_codes WHERE code = ?', ("TEST123",))
        cursor.execute('DELETE FROM used_promos WHERE user_id = ?', (test_user_id,))
        db.conn.commit()

        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î: {e}")
        return False

def test_games():
    """–¢–µ—Å—Ç –∏–≥—Ä–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("\nüéÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥—Ä...")

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bot.py
        from bot import coinflip, dice, slots, roulette

        # –¢–µ—Å—Ç –º–æ–Ω–µ—Ç–∫–∏
        won, msg, mult = coinflip('heads')
        if isinstance(won, bool) and isinstance(mult, float):
            print("‚úÖ –ú–æ–Ω–µ—Ç–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–µ—Ç–∫–µ")
            return False

        # –¢–µ—Å—Ç –∫–æ—Å—Ç–µ–π
        won, msg, mult = dice()
        if isinstance(won, bool) and mult in [0.0, 2.0, 5.0]:
            print("‚úÖ –ö–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ—Å—Ç—è—Ö")
            return False

        # –¢–µ—Å—Ç —Å–ª–æ—Ç–æ–≤
        won, msg, mult = slots()
        if isinstance(won, bool) and mult in [0.0, 3.0, 10.0]:
            print("‚úÖ –°–ª–æ—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ —Å–ª–æ—Ç–∞—Ö")
            return False

        # –¢–µ—Å—Ç —Ä—É–ª–µ—Ç–∫–∏
        won, msg, mult = roulette('color', 'red')
        if isinstance(won, bool) and isinstance(mult, float):
            print("‚úÖ –†—É–ª–µ—Ç–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ —Ä—É–ª–µ—Ç–∫–µ")
            return False

        print("‚úÖ –í—Å–µ –∏–≥—Ä—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥—Ä: {e}")
        return False

def test_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
    if os.path.exists('.env'):
        print("‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω")

        from dotenv import load_dotenv
        load_dotenv()

        bot_token = os.getenv("BOT_TOKEN")
        admin_id = os.getenv("ADMIN_ID")

        if bot_token and bot_token != "YOUR_BOT_TOKEN_HERE":
            print("‚úÖ BOT_TOKEN –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print("‚ö†Ô∏è BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather")

        if admin_id and admin_id != "123456789":
            print("‚úÖ ADMIN_ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print("‚ö†Ô∏è ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —É–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram ID")
    else:
        print("‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    try:
        import aiogram
        print("‚úÖ aiogram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ùå aiogram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

    try:
        from dotenv import load_dotenv
        print("‚úÖ python-dotenv —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ùå python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

    return True

def test_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n‚ö° –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")

    import time

    try:
        from bot import coinflip, dice, slots

        # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–≥—Ä
        start_time = time.time()
        for _ in range(1000):
            coinflip('heads')
            dice()
            slots()
        end_time = time.time()

        games_per_second = 3000 / (end_time - start_time)
        print(f"‚úÖ –°–∫–æ—Ä–æ—Å—Ç—å –∏–≥—Ä: {games_per_second:.0f} –∏–≥—Ä/—Å–µ–∫")

        # –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from bot import Database
        db = Database()

        start_time = time.time()
        test_user = 888888888

        for i in range(100):
            db.create_user(test_user + i, f"test_user_{i}")
            db.update_balance(test_user + i, 100)
            db.add_game(test_user + i, "test", 100, 200, 2.0)

        end_time = time.time()
        operations_per_second = 300 / (end_time - start_time)
        print(f"‚úÖ –°–∫–æ—Ä–æ—Å—Ç—å –ë–î: {operations_per_second:.0f} –æ–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫")

        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        cursor = db.conn.cursor()
        for i in range(100):
            cursor.execute('DELETE FROM users WHERE user_id = ?', (test_user + i,))
            cursor.execute('DELETE FROM games WHERE user_id = ?', (test_user + i,))
        db.conn.commit()

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False

def show_statistics():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –±–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª"""
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)...")

    if not os.path.exists('casino.db'):
        print("‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
        return

    try:
        conn = sqlite3.connect('casino.db')
        c = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        users_count = c.execute('SELECT COUNT(*) FROM users').fetchone()[0]
        games_count = c.execute('SELECT COUNT(*) FROM games').fetchone()[0]

        if users_count == 0:
            print("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç")
        else:
            print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
            print(f"üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {games_count}")

            # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–≥—Ä—ã
            popular = c.execute('''
                SELECT game_type, COUNT(*) as count
                FROM games
                GROUP BY game_type
                ORDER BY count DESC
                LIMIT 3
            ''').fetchall()

            if popular:
                print("üèÜ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–≥—Ä—ã:")
                for game, count in popular:
                    print(f"  ‚Ä¢ {game}: {count} –∏–≥—Ä")

        conn.close()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def main():
    print("üé∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ö–∞–∑–∏–Ω–æ-–ë–æ—Ç–∞ üé∞\n")

    results = []

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    results.append(("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config()))
    results.append(("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database()))
    results.append(("–ò–≥—Ä–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏", test_games()))
    results.append(("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", test_performance()))

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    show_statistics()

    # –ò—Ç–æ–≥–∏
    print("\n" + "="*50)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("="*50)

    passed = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name:20} {status}")
        if result:
            passed += 1

    print(f"\n–ò—Ç–æ–≥–æ: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if passed == len(results):
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python bot.py")
    else:
        print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        print("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: python run.py check")

if __name__ == "__main__":
    main()
